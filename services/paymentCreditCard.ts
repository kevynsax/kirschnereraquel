import { Donation } from "../models/Donation.ts";
import axios, { AxiosRequestConfig } from "npm:axios";

const API_KEY = "Generated by Asaas";
const API_URL = "https://sandbox.asaas.com/api/v3";

const httpConfig: AxiosRequestConfig = {
    baseURL: API_URL,
    headers: {
        access_token: API_KEY,
    },
};

const insertCustomer = (donation: Donation): Promise<string> => {
    const payload = {
        name: donation.donor.name,
        cpfCnpj: donation.donor.document,
        externalReference: donation.id,
    }

    return axios.post('/customers', payload, httpConfig)
        .then(x => x.data.id)
        .catch(err => {
            console.error('Asaas adapter error');
            console.error(`Error creating customer. ${JSON.stringify(payload)}`);
            throw new Error('payment-gateway-insert-customer', err);
        });
};

export interface CreditCardInfo {
    creditCard: {
        ccv: string;
        expiration: string;
        number: string;
    },
    remoteIp: string;
}

export const createPayment = async (donation: Donation, info: CreditCardInfo): Promise<string> => {
    const {remoteIp, creditCard} = info;
    const payload = {
        customer: await insertCustomer(donation),
        billingType: "CREDIT_CARD",
        value: donation.amount,
        dueDate: new Date().toISOString().substring(0, 10),
        remoteIp,
        creditCard: {
            ccv: creditCard.ccv,
            expiryMonth: creditCard.expiration.substring(0, 2),
            expiryYear: creditCard.expiration.slice(-2),
            holderName: donation.donor.name,
            number: creditCard.number,
        },
        paymentCardHolderInfo: {

        }
    }

    return axios.post('/payments', payload, httpConfig)
        .then(x => x.data.id)
        .catch(err => {
            console.error('Asaas adapter error');
            console.error(`Error creating payment. ${JSON.stringify(payload)}`);
            throw new Error('payment-gateway-create-payment', err);
        });
}
